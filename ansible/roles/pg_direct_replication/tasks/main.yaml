- name: Get secondary IP
  set_fact:
    secondary_ip: "{{ hostvars[groups['all'][1]]['ansible_host'] }}"
  run_once: true
  delegate_to: "{{ groups['all'][0] }}"

- name: Drop schema on secondary
  shell: |
    PGPASSWORD="{{ pg_password }}" psql -U "{{ pg_username }}" -d postgres -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"
  become_user: postgres
  when: inventory_hostname == groups['all'][1]
  ignore_errors: true

- name: Restart PostgreSQL on secondary
  service:
    name: postgresql
    state: restarted
  when: inventory_hostname == groups['all'][1]

- name: Direct transfer from primary to secondary
  shell: |
    PGPASSWORD="{{ pg_password }}" pg_dump -U "{{ pg_username }}" -h localhost -d postgres | PGPASSWORD="{{ pg_password }}" psql -h {{ secondary_ip }} -U {{ pg_username }} -d postgres
  become_user: postgres
  when: inventory_hostname == groups['all'][0]
